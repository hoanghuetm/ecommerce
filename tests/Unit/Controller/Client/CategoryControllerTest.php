<?php

namespace Tests\Unit\Controller\Client;

use App\Models\Category;
use App\Repositories\Client\CategoryRepositoryInterface;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Mockery as m;
use App\Http\Controllers\Client\CatgoryController;

class CategoryControllerTest extends TestCase
{
    /**
     * A basic unit test example.
     *
     * @return void
     */
    protected $categoryMock;

    protected function setUp(): void
    {
        $this->categoryMock = m::mock(CategoryRepositoryInterface::class . '[find, getSubCategories]');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        m::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_show_function_return_products()
    {
        $this->categoryMock->shouldReceive('find')
            ->once()
            ->with(config('number.test_category_id'))
            ->andReturn(new Category());
        $category_controller = new CatgoryController($this->categoryMock);
        $products = $category_controller->show(config('number.test_category_id'));
        $this->assertEquals('client.product.products_by_category', $products->getName());
        $this->assertArrayHasKey('products', $products->getData());
    }

    public function test_show_function_return_null()
    {
        $this->categoryMock->shouldReceive('find')
            ->once()
            ->with(config('number.test_category_id'))
            ->andReturn(null);
        $category_controller = new CatgoryController($this->categoryMock);
        $products = $category_controller->show(config('number.test_category_id'));
        $this->assertEquals('client.product.products_by_category', $products->getName());
        $this->assertArrayHasKey('products', $products->getData());
    }
}
